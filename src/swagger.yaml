openapi: 3.0.0
info:
  title: Blog API
  version: 1.0.0
  description: Express API for a blogging platform where users can write, edit,
    and delete blog posts. Other users can read and comment on blog
    posts. Implement user roles, such as admins and regular users.

    Features -

    User registration & login (JWT authentication)

    CRUD operations for blog post

    Comment system for blog posts


      Note

        Always clear the value used as placeholder(e.g string) and uncheck the "send empty value" option when performing
        a PUT(update) method to avoid sending string or an empty value except you want to 
        intentionally update a property to either

paths:
  /createUser:
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                profilePic:
                  type: string
                  format: binary
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"

        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

        "409":
          description: Email or Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userIdentifier
                - password
              properties:
                userIdentifier:
                  type: string
                  description: Login with your username or password
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          headers:
            Authorization:
              description: JWT token for authenticated user
              schema:
                type: string
                example: "Bearer<JWT_TOKEN>"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"

        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

        "401":
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"

        "404":
          description: Not found - User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /getUsers:
    get:
      summary: Get all users
      description: Only admin users have access to this endpoint
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "403":
          description: Forbidden - User is not an admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /getUser:
    get:
      summary: Get user
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"
        "403":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /updateUser:
    put:
      summary: Update user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                profilePic:
                  type: string
                  format: binary
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"
        "403":
          description: Forbidden - User is not an admin or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /changePassword:
    put:
      summary: Change user password
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
        "403":
          description: invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /newPost:
    post:
      summary: Create new post
      description: The maximum number of files to be updated is 4 for a post
      tags:
        - Post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - content
              properties:
                title:
                  type: string
                content:
                  type: string
                postMedia:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: Post created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Post"

        "403":
          description: Forbidden - User is not an admin or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /updatePost/{postId}:
    put:
      summary: Update post
      description: The maximum number of files to be uploaded or updated is 4
      tags:
        - Post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: The ID of the post to be updated
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                postMedia:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: Post updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Post"

        "403":
          description: Forbidden - User is not an admin or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /getPost/{postId}:
    get:
      summary: Get user by ID
      description: Only admin users have access to this endpoint
      tags:
        - Post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
            description: The postId of the post to be retrieved
      responses:
        "200":
          description: Post found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /getPosts:
    get:
      summary: Get user by ID
      description: All users post
      tags:
        - Post
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Users post
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Post"
        "200":
          description: No post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /deletePost/{postId}:
    delete:
      summary: Delete Post
      description: Only owner and admin can delete a post
      tags:
        - Post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: The ID of the post to be deleted
      responses:
        "200":
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
        "403":
          description: Forbidden -  You can only delete your post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /addComment/{postId}:
    post:
      summary: Make a comment
      description: Only 1 media file can be uploaded
      tags:
        - Comment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: The ID of the post to be commented on
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                commentText:
                  type: string
                commentMedia:
                  type: string
                  format: binary
      responses:
        "201":
          description: Comment added
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/Comment"

        "403":
          description: Forbidden - invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /deleteComment/{id}:
    delete:
      summary: Delete comment by ID
      tags:
        - Comment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the comment
      responses:
        "200":
          description: Comment deleted 
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
          default: false
        createdAt:
          type: string
        updatedAt:
          type: string

    Post:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        postMedia:
          type: array
          items:
            type: string
            format: binary
        createdAt:
          type: string
        updatedAt:
          type: string

    Comment:
      type: object
      properties:
        _id:
          type: string
        commentText:
          type: string
        commentMedia:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Something went wrong

    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Invalid input
        errors:
          type: object
          additionalProperties:
            type: string

    UnauthorizedError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Invalid or missing token

    ForbiddenError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Access denied. Admins only.

    NotFoundError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Resource not found

    ConflictError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Email or Username already exists
