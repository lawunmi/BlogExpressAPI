openapi: 3.0.0
info:
  title: Blog API
  version: 1.0.0
  description: Express API for a blogging platform where users can write, edit,
    and delete blog posts. Other users can read and comment on blog
    posts. Implement user roles, such as admins and regular users.

    Features -

    User registration & login (JWT authentication)

    CRUD operations for blog post

    Comment system for blog posts

paths:
  /createUser:
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                profilePic:
                  type: string
                  format: binary
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"

        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

        "409":
          description: Email or Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userIdentifier
                - password
              properties:
                userIdentifier:
                  type: string
                  description: Login with your username or password
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          headers:
            Authorization:
              description: JWT token for authenticated user
              schema:
                type: string
                example: "Bearer<JWT_TOKEN>"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"

        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

        "401":
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"

        "404":
          description: Not found - User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /getUsers:
    get:
      summary: Get all users
      description: Only admin users have access to this endpoint
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "403":
          description: Forbidden - User is not an admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /getUserByID/{id}:
    get:
      summary: Get user by ID
      description: Only admin users have access to this endpoint
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the user details to be retrieved
      responses:
        "200":
          description: User found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"
        "403":
          description: Forbidden - User is not an admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /updateUser/{id}:
    put:
      summary: Update user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                profilePic:
                  type: string
                  format: binary
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - fail
                    default: success
                  message:
                    type: string
                  result:
                    $ref: "#/components/schemas/User"
        "403":
          description: Forbidden - User is not an admin or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
          default: false
        createdAt:
          type: string
        updatedAt:
          type: string

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Something went wrong

    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Invalid input
        errors:
          type: object
          additionalProperties:
            type: string

    UnauthorizedError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Invalid or missing token

    ForbiddenError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Access denied. Admins only.

    NotFoundError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Resource not found

    ConflictError:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Email or Username already exists
